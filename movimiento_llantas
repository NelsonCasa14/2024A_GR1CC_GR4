#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <learnopengl/shader.h>
#include <learnopengl/camera.h>
#include <learnopengl/model.h>

#include <iostream>

#define STB_IMAGE_IMPLEMENTATION 
#include <learnopengl/stb_image.h>

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow* window);
void updateWheelRotation(float deltaTime, float speed);
void renderCarModelWithWheelRotation(Model &model, Shader &shader, glm::vec3 position, float wheelRotation);

// settings
const unsigned int SCR_WIDTH = 1000;
const unsigned int SCR_HEIGHT = 800;

// camera
Camera camera(glm::vec3(0.0f, 3.7f, -11.0f));

float lastX = SCR_WIDTH / 2.0f;
float lastY = SCR_HEIGHT / 2.0f;
bool firstMouse = true;

// timing
float deltaTime = 0.0f;
float lastFrame = 0.0f;

// movement control
bool movingForward = false;

float wheelRotation = 0.0f;
const float wheelRadius = 0.5f;  // Ajusta el radio de la rueda según tu modelo

int main()
{
    // glfw: initialize and configure
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef _APPLE_
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "RaceX", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    glfwSetScrollCallback(window, scroll_callback);

    // tell GLFW to capture our mouse
    glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

    // glad: load all OpenGL function pointers
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    // configure global opengl state
    glEnable(GL_DEPTH_TEST);

    // build and compile shaders
    Shader ourShader("shaders/shader_exercise16_mloading.vs", "shaders/shader_exercise16_mloading.fs");

    // load models
    Model objetoModel("C:/Users/LENOVO.USER/Documents/Visual Studio 2022/OpenGL/OpenGL/Modelos/carro/carro.obj");
    Model pistaModel("C:/Users/LENOVO.USER/Documents/Visual Studio 2022/OpenGL/OpenGL/Modelos/pista/pista.obj");
    Model llegadaModel("C:/Users/LENOVO.USER/Documents/Visual Studio 2022/OpenGL/OpenGL/Modelos/llegada/llegada.obj");

    camera.MovementSpeed = 0.0; // Optional. Modify the speed of the camera

    bool cameraStopped = false;

    while (!glfwWindowShouldClose(window))
    {
        // per-frame time logic
        float currentFrame = glfwGetTime();
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;

        // input
        processInput(window);

        // Increment camera speed if not stopped
        if (!cameraStopped)
        {
            camera.MovementSpeed += 0.5f * deltaTime;
        }

        // Update camera position if moving forward
        if (movingForward && !cameraStopped)
        {
            camera.ProcessKeyboard(FORWARD, deltaTime);

            // Check if camera has reached the stopping coordinate
            if (camera.Position.z <= -7075.0f && camera.Position.x <= 10000.0f)
            {
                cameraStopped = true;
                camera.MovementSpeed = 0.0f; // Ensure camera stops moving
            }
        }

        // Actualiza la rotación de las ruedas
        updateWheelRotation(deltaTime, camera.MovementSpeed);

        // render
        glClearColor(0.05f, 0.05f, 0.05f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // don't forget to enable shader before setting uniforms
        ourShader.use();

        // view/projection transformations
        glm::mat4 projection = glm::perspective(glm::radians(camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 1000.0f);
        glm::mat4 view = camera.GetViewMatrix();
        ourShader.setMat4("projection", projection);
        ourShader.setMat4("view", view);

        // Renderiza el modelo del carro con la rotación de las ruedas
        glm::vec3 cameraPosition = camera.Position;
        renderCarModelWithWheelRotation(objetoModel, ourShader, cameraPosition + glm::vec3(0.0f, -3.0f, -12.0f), wheelRotation);

        // Renderiza el modelo de la pista
        glm::mat4 model = glm::mat4(1.0f);
        model = glm::translate(model, glm::vec3(-2.0f, 0.0f, -3475.0f)); // Posición de la pista
        model = glm::rotate(model, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f)); // Rotación de la pista
        model = glm::scale(model, glm::vec3(0.1f, 0.1f, 0.1f)); // Escala de la pista
        ourShader.setMat4("model", model);
        pistaModel.Draw(ourShader);

        // Renderiza el modelo de la llegada
        model = glm::mat4(1.0f);
        model = glm::translate(model, glm::vec3(-2.0f, 0.0f, -7075.0f)); // Posición de la llegada
        model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f)); // Rotación de la llegada
        model = glm::scale(model, glm::vec3(0.1f, 0.1f, 0.1f)); // Escala de la llegada
        ourShader.setMat4("model", model);
        llegadaModel.Draw(ourShader);

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // glfw: terminate, clearing all previously allocated GLFW resources.
    glfwTerminate();
    return 0;
}

// Define los límites de movimiento en el eje X
const float LEFT_LIMIT = -27.0f;
const float RIGHT_LIMIT = 13.0f;

void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
        movingForward = true;

    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
    {
        glm::vec3 position = camera.Position;
        if (position.x > LEFT_LIMIT)
            camera.ProcessKeyboard(LEFT, deltaTime);
    }

    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
    {
        glm::vec3 position = camera.Position;
        if (position.x < RIGHT_LIMIT)
            camera.ProcessKeyboard(RIGHT, deltaTime);
    }
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
    camera.ProcessMouseScroll(yoffset);
}

void updateWheelRotation(float deltaTime, float speed) {
    // Calcula la distancia recorrida en este frame
    float distance = speed * deltaTime;

    // Actualiza el ángulo de rotación de las ruedas
    wheelRotation += (distance / wheelRadius) * 180.0f / glm::pi<float>();
    if (wheelRotation >= 360.0f) {
        wheelRotation -= 360.0f;
    }
}

void renderCarModelWithWheelRotation(Model& model, Shader& shader, glm::vec3 position, float wheelRotation) {
    // Aplicar la rotación a cada rueda del modelo
    glm::mat4 modelMatrix = glm::mat4(1.0f);
    modelMatrix = glm::translate(modelMatrix, position);

    // La rotación de las ruedas se aplica globalmente
    glm::mat4 wheelMatrix = glm::rotate(glm::mat4(1.0f), glm::radians(wheelRotation), glm::vec3(0.0f, 1.0f, 0.0f));

    // Usa la matriz de modelo compuesta
    shader.use();
    shader.setMat4("model", modelMatrix * wheelMatrix);

    // Renderiza todas las mallas del modelo
    model.Draw(shader); // Asegúrate de que `Draw` se encargue de dibujar todas las mallas
}

